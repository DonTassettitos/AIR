/**
 * Copyright (c) 2020 University of Luxembourg. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors may be
 * used to endorse or promote products derived from this software without specific prior
 * written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY OF LUXEMBOURG AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE UNIVERSITY OF LUXEMBOURG OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/*  
   NEXMark Generator -- Niagara Extension to XMark Data Generator

   Acknowledgements:
   The NEXMark Generator was developed using the xmlgen generator 
   from the XMark Benchmark project as a basis. The NEXMark
   generator generates streams of auction elements (bids, items
   for auctions, persons) as opposed to the auction files
   generated by xmlgen.  xmlgen was developed by Florian Waas.
   See http://www.xml-benchmark.org for information.

   Copyright (c) Dept. of  Computer Science & Engineering,
   OGI School of Science & Engineering, OHSU. All Rights Reserved.

   Permission to use, copy, modify, and distribute this software and
   its documentation is hereby granted, provided that both the
   copyright notice and this permission notice appear in all copies
   of the software, derivative works or modified versions, and any
   portions thereof, and that both notices appear in supporting
   documentation.

   THE AUTHORS AND THE DEPT. OF COMPUTER SCIENCE & ENGINEERING 
   AT OHSU ALLOW USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION, 
   AND THEY DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES 
   WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

   This software was developed with support from NSF ITR award
   IIS0086002 and from DARPA through NAVY/SPAWAR 
   Contract No. N66001-99-1-8098.

*/

/*
 * AuctionsNexmark.hpp
 *
 *  Created on: April 2, 2020
 *      Author: damien.tassetti
 */

#pragma once

#include "States.hpp"
#include <iostream>

namespace nexmark_gen {
using std::ostream;
using std::endl;

// The data structures are of POD (Plain Old Data) type
// because they are easier to stringify with a memcpy
typedef struct bid{ // total = 28 bytes
    int amount;
    int auction_id;
    int item_id;
    int bidder_id;
    double event_time;
} Bid;

enum AuctionImportance {RegularAuction, FeaturedAuction};
enum BiddingRules {NormalBiddingRules, DutchBiddingRules};

typedef struct { // total = 56 bytes
    int id;
    int seller_id;
    int category_id;
    struct {
        double event_start;
        double event_end;
    };
    bool reserve_price_is_null;
    int reserve_price;
    bool privacy_is_null;
    bool privacy;
    int quantity;
    AuctionImportance importance;
    BiddingRules bidding_rules;
} Auction;

// April 10th data types update
// lastnames_maxlength is 16
// firstnames_maxlength is 17
// extensions_maxlength is 24
// educations_maxlength is 15
// cities_maxlength is 15
// states_maxlength is 30
typedef struct { // total = 336 bytes
    int id = 0;
    char name[17 + 1 + 16 + 1];

    bool has_address;
    char state[30 + 1];
    char city[15 + 1];
    int zip_code;
    char street[2 + 1 + 16 + 3 + 1];

    char email[17 + 1 + 16 + 1 + 24 + 1];

    bool has_phone;
    char phone[16];

    bool has_homepage;
    char homepage[11 + 24 + 2 + 16 + 1];

    bool has_credit_card;
    char credit_card[20];

    bool has_profile;
	bool has_education;
    char education[16];
	bool has_gender;
    char gender[7]; // "male" or "female"
	bool has_age;
    int age;
	bool has_business;
    double income;
    int nof_interests; // between 0 and 4 interests
    int interest1;
    int interest2;
    int interest3;
    int interest4;

    double timestamp;
} Person;

enum EventType {BidType, AuctionType, PersonType};

typedef struct { // total = 344 bytes
    EventType event_type;  // Allows to choose how to use the event
    union
    {
        Bid bid;
        Auction auction;
        Person person;
    };
} Event;

};