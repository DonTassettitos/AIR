/**
 * Copyright (c) 2020 University of Luxembourg. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors may be
 * used to endorse or promote products derived from this software without specific prior
 * written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY OF LUXEMBOURG AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE UNIVERSITY OF LUXEMBOURG OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/*  
   NEXMark Generator -- Niagara Extension to XMark Data Generator

   Acknowledgements:
   The NEXMark Generator was developed using the xmlgen generator 
   from the XMark Benchmark project as a basis. The NEXMark
   generator generates streams of auction elements (bids, items
   for auctions, persons) as opposed to the auction files
   generated by xmlgen.  xmlgen was developed by Florian Waas.
   See http://www.xml-benchmark.org for information.

   Copyright (c) Dept. of  Computer Science & Engineering,
   OGI School of Science & Engineering, OHSU. All Rights Reserved.

   Permission to use, copy, modify, and distribute this software and
   its documentation is hereby granted, provided that both the
   copyright notice and this permission notice appear in all copies
   of the software, derivative works or modified versions, and any
   portions thereof, and that both notices appear in supporting
   documentation.

   THE AUTHORS AND THE DEPT. OF COMPUTER SCIENCE & ENGINEERING 
   AT OHSU ALLOW USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION, 
   AND THEY DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES 
   WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

   This software was developed with support from NSF ITR award
   IIS0086002 and from DARPA through NAVY/SPAWAR 
   Contract No. N66001-99-1-8098.

*/


/*
 * Auctions.cpp
 *
 *  Created on: April 2, 2020
 *      Author: damien.tassetti
 */

#include "Auctions.hpp"
#include "Random.hpp"
#include "EventGenerator.hpp"
#include <assert.h>
#include <limits.h>
using nexmark_gen::AuctionsManager;
using nexmark_gen::Auction;
using nexmark_gen::Random;

AuctionsManager::AuctionsManager(int min_auction_duration, int worldSize, int rank) :
   worldSize(worldSize),
   rank(rank)
{
   this->nofItems = 0;
   this->last_bids = unordered_map<int, int>();
   this->times = map<int, pair<long int, long int>>();
   this->min_auction_duration = min_auction_duration;
}


// not optimized
int AuctionsManager::getExistingOpenAuctionId() {
   if (last_bids.size() == 0) {
      cerr << "No existing auction\n";
      throw "No existing auction";
   } else {
      
      // we keep a list of ids updated (costly when removing ids but id 
      // lookup becomes that much easier)
      return list_of_ids[Random::getRandomInt(0, list_of_ids.size() - 1)];
   }
}

int AuctionsManager::getNewId() {

   // highest index was nofItems - 1
   // now we add nofItems
   // initialize price
   int key = nofItems * worldSize + rank;

   last_bids[key] = Random::getRandomInt(1, 200);
   list_of_ids.push_back(key);
   nofItems++;

   return key;
}

void AuctionsManager::update(Auction& auction) {

   // map size is stable between 1600 and 1700 values
   // with current auction time (min & max) parameters
   // current parameters : 2h and 24h, with a 1 to 60
   // seconds time increment between auctions (avg=30)
   //
   // expected value is (2+24)*60*60/2/30 = 1560 values
   // so ~ 6% variation from expected value with this 
   // experimentation
   // 
   // it might be useful to limit the map size with a
   // global variable (e.g. 3000 values max)
   //
   // cout << times.size() << endl;

   if (last_bids.count(auction.id) == 0) {
      cerr << "Auction does not exist\n";
      throw "Auction does not exist";
   } else {
      times[auction.id] = pair<long int, long int>(auction.event_start, auction.event_end);
      long int current_time = auction.event_start;
      
      // find unneccessary auctions
      vector<int> keys_to_remove = vector<int>();
      for(auto& t: times) {
         if ((last_bids.size() - keys_to_remove.size()) > 3000) {
            keys_to_remove.push_back(t.first); // secretely remove auction to keep generation time low
         }
         else if (t.second.second <= current_time) {
            keys_to_remove.push_back(t.first); // auction has ended so there is no need to keep track of it
         }
         else if (t.second.first >= (current_time - min_auction_duration)) {
            // map ordered by id, no need to look into bigger ids because
            // auctions after this point will surely not have ended yet
            // so we can break the loop here
            break; 
         }
      }

      // remove unneccessary auctions
      for (size_t i = 0; i < keys_to_remove.size(); i++)
      {
         times.erase(keys_to_remove[i]);
         last_bids.erase(keys_to_remove[i]);
      }

      list_of_ids.clear();
      list_of_ids.reserve(last_bids.size());
      for (auto const& a : last_bids){ // we update the list with the ids we kept
         list_of_ids.push_back(a.first);
      }
   }
}

void AuctionsManager::increasePrice(int itemId) {
   auto it = last_bids.find(itemId);
   if (it != last_bids.end()) {
      // auction exists and not closed
      (*it).second += Random::getRandomInt(1, 25);

   } else {
      // auction closed or doesn't exists
      cerr << "item / auction does not exist or is closed\n";
      throw "item / auction does not exist or is closed";
   }
}

int AuctionsManager::getPrice(int itemId){
   auto it = last_bids.find(itemId);
   if (it != last_bids.end()) {
      // auction exists and not closed
      return (*it).second;

   } else {
      // auction closed or doesn't exists
      cerr << "item / auction does not exist or is closed\n";
      throw "item / auction does not exist or is closed";
   }
}
