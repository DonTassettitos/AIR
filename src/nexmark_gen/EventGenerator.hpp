/**
 * Copyright (c) 2020 University of Luxembourg. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors may be
 * used to endorse or promote products derived from this software without specific prior
 * written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY OF LUXEMBOURG AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE UNIVERSITY OF LUXEMBOURG OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/

/*  
   NEXMark Generator -- Niagara Extension to XMark Data Generator

   Acknowledgements:
   The NEXMark Generator was developed using the xmlgen generator 
   from the XMark Benchmark project as a basis. The NEXMark
   generator generates streams of auction elements (bids, items
   for auctions, persons) as opposed to the auction files
   generated by xmlgen.  xmlgen was developed by Florian Waas.
   See http://www.xml-benchmark.org for information.

   Copyright (c) Dept. of  Computer Science & Engineering,
   OGI School of Science & Engineering, OHSU. All Rights Reserved.

   Permission to use, copy, modify, and distribute this software and
   its documentation is hereby granted, provided that both the
   copyright notice and this permission notice appear in all copies
   of the software, derivative works or modified versions, and any
   portions thereof, and that both notices appear in supporting
   documentation.

   THE AUTHORS AND THE DEPT. OF COMPUTER SCIENCE & ENGINEERING 
   AT OHSU ALLOW USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION, 
   AND THEY DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES 
   WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

   This software was developed with support from NSF ITR award
   IIS0086002 and from DARPA through NAVY/SPAWAR 
   Contract No. N66001-99-1-8098.

*/

/*
 * EventGenerator.hpp
 *
 *  Created on: April 1, 2020
 *      Author: damien.tassetti
 */

#pragma once
#include <mpi.h>
#include "../dataflow/Vertex.hpp"
#include "../communication/Message.hpp"
#include "../serialization/Serialization.hpp"
#include "Auctions.hpp"
#include "Persons.hpp"

#include <fstream>

namespace nexmark_gen {

class EventGenerator: public Vertex {

public:

	EventGenerator(int tag, int rank, int worldSize, unsigned long tp);

	~EventGenerator();

	void streamProcess(int channel);

   // global minimum number of persons and auctions to generate
   // each rank will generate part of it, so you have to make sure
   // you have at least one per rank

   // min_persons and min_auctions must be higher than the number of dataflows
   // or else the generator will fail (auction managers will assume enough
   // objects have been created and when looking for the previouso one, will
   // find nothing)
   static const int min_persons = 28;
   static const int min_auctions = 28;
   int generated_persons = 0;
   int generated_auctions = 0;

   // total chances = 111
   static const int auction_chances = 10;
   static const int bid_chances = 100;
   static const int person_chances = 1;

   // auctions durations in seconds
   static const int max_auction_duration = 24*60*60; // 24 hours
   static const int min_auction_duration = 2*60*60; // 2 hours

   // number of categories
   static const int nof_categories = 1000;

private:

	unsigned long throughput;
	int events_per_msg;
   int nof_events;
   double time_increment_per_event;
   int msg_count;
   PersonsManager persons;
   AuctionsManager auctions;

   std::ofstream bids_datafile; // for sanity checks
   std::ofstream auctions_datafile;
   std::ofstream persons_datafile;

   Event generateBid();
   Event generateAuction();
   Event generatePerson();

   void send(Message*const message, int channel);
   inline long int getCurrentTimeInMicroseconds(){return (long int)(MPI_Wtime() * 1000000);}

protected:
   int iteration_count;
   int starting_second;
   virtual Message* initMessage(size_t capacity);
	virtual void getNextMessage(Message* message, const int events_per_msg);
   virtual void addMessageId(const int message_id, Message* message);
};
};
